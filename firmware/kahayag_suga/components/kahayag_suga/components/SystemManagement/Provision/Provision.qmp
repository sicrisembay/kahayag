<?xml version="1.0" encoding="UTF-8"?>
<package name="provision" stereotype="0x02">
 <class name="Provision" superclass="qpc::QHsm">
  <attribute name="timeoutEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
  <attribute name="pParent" type="QActive *" visibility="0x02" properties="0x00"/>
  <attribute name="pc" type="protocomm_t *" visibility="0x02" properties="0x00"/>
  <attribute name="security" type="int" visibility="0x02" properties="0x00"/>
  <attribute name="pop" type="const protocomm_security_pop_t *" visibility="0x02" properties="0x00"/>
  <attribute name="wifi_state" type="wifi_prov_sta_state_t" visibility="0x02" properties="0x00"/>
  <attribute name="wifi_disconnect_reason" type="wifi_prov_sta_fail_reason_t" visibility="0x02" properties="0x00"/>
  <attribute name="ssid[MAX_PROV_SSID_LEN + 1]" type="char" visibility="0x02" properties="0x00"/>
  <attribute name="password[MAX_PROV_PASS_LEN+1]" type="char" visibility="0x02" properties="0x00"/>
  <attribute name="wifi_cfg" type="wifi_config_t *" visibility="0x02" properties="0x00"/>
  <statechart properties="0x03">
   <initial target="../1">
    <initial_glyph conn="6,4,5,0,6,4">
     <action box="0,-2,10,2"/>
    </initial_glyph>
   </initial>
   <state name="TOP">
    <initial target="../1">
     <initial_glyph conn="9,14,5,0,7,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="INACTIVE">
     <entry>ESP_LOGI(TAG, &quot;INACTIVE entry&quot;);</entry>
     <exit>ESP_LOGI(TAG, &quot;INACTIVE exit&quot;);</exit>
     <tran trig="START_PROVISION" target="../../2">
      <tran_glyph conn="12,23,3,1,58,21,-9">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="12,16,49,14">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="ACTIVE">
     <entry>esp_err_t retval = ESP_OK;
QEvt *pEvt = NULL;

ESP_LOGI(TAG, &quot;ACTIVE: entry&quot;);

ESP_LOGI(TAG, &quot;Starting WiFi SoftAP provisioning&quot;);
ESP_ERROR_CHECK(Wifi_AddHook(Prov_EventHandler));

/* Start Wifi AP */
retval = doWork(Prov_start_wifi_ap);
if(retval != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to create worker thread for Prov_start_wifi_ap&quot;);
    pEvt = Q_NEW(QEvt, AP_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
}

/* Arm Timeout Timer, One-shot */
QTimeEvt_armX(&amp;me-&gt;timeoutEvt, PROVISION_TIMEOUT, 0);</entry>
     <exit>ESP_LOGI(TAG, &quot;ACTIVE exit&quot;);

ESP_ERROR_CHECK(Wifi_RemoveHook(Prov_EventHandler));

/* Disarm Timeout Timer */
QTimeEvt_disarm(&amp;me-&gt;timeoutEvt);</exit>
     <tran trig="AP_STARTED" target="../3">
      <action>ESP_LOGI(TAG, &quot;Wifi AP Started&quot;);</action>
      <tran_glyph conn="12,47,3,3,14">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <tran trig="AP_START_FAILED" target="../../1">
      <action>ESP_LOGI(TAG, &quot;Wifi AP Start Failed&quot;);</action>
      <tran_glyph conn="12,40,3,1,56,-14,-7">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <tran trig="PROV_SERVICE_TIMEOUT" target="../../1">
      <tran_glyph conn="12,42,3,1,57,-17,-8">
       <action box="0,-2,21,2"/>
      </tran_glyph>
     </tran>
     <state name="SERVICE_ACTIVE">
      <entry>esp_err_t retval = ESP_OK;
QEvt *pEvt = NULL;

ESP_LOGI(TAG, &quot;SERVICE_ACTIVE: Entry&quot;);
ESP_LOGI(TAG, &quot;Start provisioning service&quot;);
/* Rearm one shot timeout timer */
QTimeEvt_rearm(&amp;me-&gt;timeoutEvt, PROVISION_TIMEOUT);
/* start provisioning service */
retval = doWork(Prov_start_service);
if(retval != ESP_OK) {
    pEvt = Q_NEW(QEvt, PROV_SERVICE_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
}</entry>
      <exit>ESP_LOGI(TAG, &quot;SERVICE_ACTIVE: Exit&quot;);</exit>
      <tran trig="PROV_SERVICE_START_FAILED" target="../../../1">
       <action>ESP_LOGE(TAG, &quot;Failed to create worker thread for Prov_start_service&quot;);</action>
       <tran_glyph conn="26,50,3,1,46,-29,-11">
        <action box="0,-2,25,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PROV_SERVICE_STOPPED" target="../../../1">
       <action>ESP_LOGI(TAG, &quot;Provisioning service stopped&quot;);</action>
       <tran_glyph conn="26,52,3,1,48,-32,-13">
        <action box="0,-2,23,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PROV_SERVICE_STARTED">
       <action>ESP_LOGI(TAG, &quot;Provisioning service started&quot;);</action>
       <tran_glyph conn="26,54,3,-1,22">
        <action box="0,-2,21,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PROV_SERVICE_TIMEOUT">
       <action>ESP_LOGI(TAG, &quot;Stopping Provision Service&quot;);
doWork(Prov_stop_service);</action>
       <tran_glyph conn="26,56,3,-1,22">
        <action box="0,-2,21,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="26,43,32,21">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="12,32,49,39">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_glyph node="6,8,72,70"/>
   </state>
   <state_diagram size="80,80"/>
  </statechart>
 </class>
 <attribute name="TAG" type="const char *" visibility="0x02" properties="0x00">
  <code>=&quot;PROV_QHSM&quot;;</code>
 </attribute>
 <attribute name="wifi_prov_handlers" type="wifi_prov_config_handlers_t" visibility="0x02" properties="0x00">
  <code>= {
    .get_status_handler   = Prov_get_status_handler,
    .set_config_handler   = Prov_set_config_handler,
    .apply_config_handler = Prov_apply_config_handler,
};</code>
 </attribute>
 <operation name="Prov_ctor" type="QHsm *" visibility="0x00" properties="0x00">
  <parameter name="parent" type="QActive * const"/>
  <code>static uint8_t bInitDone = (uint8_t)0;
Provision *me;

if(bInitDone == (uint8_t)0) {
    me = &amp;l_Provision;
    /* Call constructor */
    QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Provision_initial));

    /* Call orthogonal Component constructor */

    /* Call Timer Constructor */
    QTimeEvt_ctorX(&amp;me-&gt;timeoutEvt, parent, PROV_SERVICE_TIMEOUT_SIG, 0U);

    /* Initialize members */
    me-&gt;pParent = parent;
    me-&gt;pc = NULL;
    me-&gt;security = 0;
    me-&gt;pop = NULL;
    memset(me-&gt;ssid, 0, sizeof(me-&gt;ssid));
    snprintf(me-&gt;ssid, MAX_PROV_SSID_LEN, &quot;SUGA_XXXXXX&quot;);
    memset(me-&gt;password, 0, sizeof(me-&gt;password));
    snprintf(me-&gt;password, MAX_PROV_PASS_LEN, &quot;password123&quot;);

    bInitDone = (uint8_t)1;
}

return(&amp;me-&gt;super);</code>
 </operation>
 <operation name="Prov_EventHandler" type="esp_err_t" visibility="0x02" properties="0x00">
  <parameter name="ctx" type="void *"/>
  <parameter name="event" type="system_event_t *"/>
  <code>Provision * me = &amp;l_Provision;

/* For accessing reason codes in case of disconnection */
system_event_info_t *info = &amp;event-&gt;event_info;

/* If pointer to provisioning application data is NULL
 * then provisioning is not running, therefore return without
 * error */
if (!me) {
    return ESP_OK;
}

switch(event-&gt;event_id) {
case SYSTEM_EVENT_STA_START:
    ESP_LOGI(TAG, &quot;STA Start&quot;);
    /* Once configuration is received by protocomm server,
     * device is restarted as both AP and Station.
     * Once station starts, wait for connection to
     * establish with configured host SSID and password */
    me-&gt;wifi_state = WIFI_PROV_STA_CONNECTING;
    break;

case SYSTEM_EVENT_STA_GOT_IP:
    ESP_LOGI(TAG, &quot;STA Got IP&quot;);
    /* Station got IP. That means configuraion is successful.
     * Schedule timer to stop provisioning app after 30 seconds. */
    me-&gt;wifi_state = WIFI_PROV_STA_CONNECTED;
    /* Note that, after restarting the WiFi in Station + AP mode, the
     * user gets disconnected from the AP for a while. But at the same
     * time, the user app requests for status update from the device
     * to verify that the provisioning was successful. Therefore, the
     * turning off of the AP must be delayed long enough for the user
     * to reconnect and get STA connection status from the device.
     * Otherwise, the AP will be turned off before the user can
     * reconnect and thus the user app will see connection timed out,
     * signalling a failure in provisioning. */
    QTimeEvt_rearm(&amp;me-&gt;timeoutEvt, PROVISION_TIMEOUT);
    break;

case SYSTEM_EVENT_STA_DISCONNECTED:
    ESP_LOGE(TAG, &quot;STA Disconnected&quot;);
    /* Station couldn't connect to configured host SSID */
    me-&gt;wifi_state = WIFI_PROV_STA_DISCONNECTED;
    ESP_LOGE(TAG, &quot;Disconnect reason : %d&quot;, info-&gt;disconnected.reason);

    /* Set code corresponding to the reason for disconnection */
    switch (info-&gt;disconnected.reason) {
    case WIFI_REASON_AUTH_EXPIRE:
    case WIFI_REASON_4WAY_HANDSHAKE_TIMEOUT:
    case WIFI_REASON_BEACON_TIMEOUT:
    case WIFI_REASON_AUTH_FAIL:
    case WIFI_REASON_ASSOC_FAIL:
    case WIFI_REASON_HANDSHAKE_TIMEOUT:
        ESP_LOGI(TAG, &quot;STA Auth Error&quot;);
        me-&gt;wifi_disconnect_reason = WIFI_PROV_STA_AUTH_ERROR;
        break;
    case WIFI_REASON_NO_AP_FOUND:
        ESP_LOGI(TAG, &quot;STA AP Not found&quot;);
        me-&gt;wifi_disconnect_reason = WIFI_PROV_STA_AP_NOT_FOUND;
        break;
    default:
        /* If none of the expected reasons,
         * retry connecting to host SSID */
        me-&gt;wifi_state = WIFI_PROV_STA_CONNECTING;
        esp_wifi_connect();
        break;
    }
    break;

default:
    break;
}
return ESP_OK;</code>
 </operation>
 <operation name="Prov_start_wifi_ap" type="void" visibility="0x02" properties="0x00">
  <code>uint8_t eth_mac[6];
esp_err_t err = ESP_OK;
Provision *me = &amp;l_Provision;
wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
QEvt *pEvt = NULL;

/* Initialise WiFi with default configuration */
err = esp_wifi_init(&amp;cfg);
if (err != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to init WiFi : %d&quot;, err);
    pEvt = Q_NEW(QEvt, AP_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
    return;
}

/* Set Wifi mode to AP */
ESP_LOGI(TAG, &quot;Set WiFi mode to AP&quot;);
err = esp_wifi_set_mode(WIFI_MODE_AP);
if (err != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to set WiFi mode : %d&quot;, err);
    pEvt = Q_NEW(QEvt, AP_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
    return;
}

/* SSID is based on MAC */
err = esp_wifi_get_mac(WIFI_IF_STA, eth_mac);
if(err != ESP_OK) {
    ESP_LOGE(TAG, &quot;Error in getting mac: %d&quot;, err);
} else {
    snprintf(me-&gt;ssid, MAX_PROV_SSID_LEN, &quot;SUGA_%02X%02X%02X&quot;,
            eth_mac[3], eth_mac[4], eth_mac[5]);
}

/* Build WiFi configuration for AP mode */
wifi_config_t wifi_config = {
    .ap = {
        .max_connection = 5,
    },
};

strncpy((char *) wifi_config.ap.ssid, me-&gt;ssid, sizeof(wifi_config.ap.ssid));
wifi_config.ap.ssid_len = strlen(me-&gt;ssid);

if (strlen(me-&gt;password) == 0) {
    memset(wifi_config.ap.password, 0, sizeof(wifi_config.ap.password));
    wifi_config.ap.authmode = WIFI_AUTH_OPEN;
} else {
    strncpy((char *) wifi_config.ap.password, me-&gt;password, sizeof(wifi_config.ap.password));
    wifi_config.ap.authmode = WIFI_AUTH_WPA_WPA2_PSK;
}

/* Start WiFi in AP mode with configuration built above */
ESP_LOGI(TAG, &quot;Configure WiFi AP&quot;);
err = esp_wifi_set_config(ESP_IF_WIFI_AP, &amp;wifi_config);
if (err != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to set WiFi config : %d&quot;, err);
    pEvt = Q_NEW(QEvt, AP_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
    return;
}
ESP_LOGI(TAG, &quot;Start WiFi&quot;);
err = esp_wifi_start();
if (err != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to start WiFi : %d&quot;, err);
    pEvt = Q_NEW(QEvt, AP_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
    return;
}

pEvt = Q_NEW(QEvt, AP_STARTED_SIG);
QACTIVE_POST(me-&gt;pParent, pEvt, me);
</code>
 </operation>
 <operation name="Prov_start_service" type="void" visibility="0x02" properties="0x00">
  <code>Provision * me = &amp;l_Provision;
QEvt * pEvt = NULL;

/* Create new protocomm instance */
me-&gt;pc = protocomm_new();
if (me-&gt;pc == NULL) {
    ESP_LOGE(TAG, &quot;Failed to create new protocomm instance&quot;);
    pEvt = Q_NEW(QEvt, PROV_SERVICE_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
    return;
}

/* Config for protocomm_httpd_start() */
protocomm_httpd_config_t pc_config = PROTOCOMM_HTTPD_DEFAULT_CONFIG();

/* Start protocomm server on top of HTTP */
if (protocomm_httpd_start(me-&gt;pc, &amp;pc_config) != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to start protocomm HTTP server&quot;);
    pEvt = Q_NEW(QEvt, PROV_SERVICE_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
    return;
}

/* Set protocomm version verification endpoint for protocol */
protocomm_set_version(me-&gt;pc, &quot;proto-ver&quot;, &quot;V0.1&quot;);

/* Set protocomm security type for endpoint */
if (me-&gt;security == 0) {
    protocomm_set_security(me-&gt;pc, &quot;prov-session&quot;, &amp;protocomm_security0, NULL);
} else if (me-&gt;security == 1) {
    protocomm_set_security(me-&gt;pc, &quot;prov-session&quot;, &amp;protocomm_security1, me-&gt;pop);
}

/* Add endpoint for provisioning to set wifi station config */
if (protocomm_add_endpoint(me-&gt;pc, &quot;prov-config&quot;,
                           wifi_prov_config_data_handler,
                           (void *) &amp;wifi_prov_handlers) != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to set provisioning endpoint&quot;);
    protocomm_httpd_stop(me-&gt;pc);
    pEvt = Q_NEW(QEvt, PROV_SERVICE_START_FAILED_SIG);
    QACTIVE_POST(me-&gt;pParent, pEvt, me);
    return;
}

pEvt = Q_NEW(QEvt, PROV_SERVICE_STARTED_SIG);
QACTIVE_POST(me-&gt;pParent, pEvt, me);
</code>
 </operation>
 <operation name="Prov_stop_service" type="void" visibility="0x02" properties="0x00">
  <code>Provision * me = &amp;l_Provision;
QEvt * pEvt = NULL;

/* Remove provisioning endpoint */
protocomm_remove_endpoint(me-&gt;pc, &quot;prov-config&quot;);
/* Unset provisioning security */
protocomm_unset_security(me-&gt;pc, &quot;prov-session&quot;);
/* Unset provisioning version endpoint */
protocomm_unset_version(me-&gt;pc, &quot;proto-ver&quot;);
/* Stop protocomm server */
protocomm_httpd_stop(me-&gt;pc);
/* Delete protocomm instance */
protocomm_delete(me-&gt;pc);

pEvt = Q_NEW(QEvt, PROV_SERVICE_STOPPED_SIG);
QACTIVE_POST(me-&gt;pParent, pEvt, me);</code>
 </operation>
 <operation name="Prov_get_status_handler" type="esp_err_t" visibility="0x02" properties="0x00">
  <parameter name="resp_data" type="wifi_prov_config_get_data_t *"/>
  <code>Provision * me = &amp;l_Provision;
/* Initialise to zero */
memset(resp_data, 0, sizeof(wifi_prov_config_get_data_t));

if (Prov_get_wifi_state(&amp;resp_data-&gt;wifi_state) != ESP_OK) {
    ESP_LOGW(TAG, &quot;Prov app not running&quot;);
    return ESP_FAIL;
}

if (me-&gt;wifi_state == WIFI_PROV_STA_CONNECTED) {
    ESP_LOGI(TAG, &quot;Connected state&quot;);

    /* IP Addr assigned to STA */
    tcpip_adapter_ip_info_t ip_info;
    tcpip_adapter_get_ip_info(TCPIP_ADAPTER_IF_STA, &amp;ip_info);
    char *ip_addr = ip4addr_ntoa(&amp;ip_info.ip);
    strcpy(resp_data-&gt;conn_info.ip_addr, ip_addr);

    /* AP information to which STA is connected */
    wifi_ap_record_t ap_info;
    esp_wifi_sta_get_ap_info(&amp;ap_info);
    memcpy(resp_data-&gt;conn_info.bssid, (char *)ap_info.bssid, sizeof(ap_info.bssid));
    memcpy(resp_data-&gt;conn_info.ssid,  (char *)ap_info.ssid,  sizeof(ap_info.ssid));
    resp_data-&gt;conn_info.channel   = ap_info.primary;
    resp_data-&gt;conn_info.auth_mode = ap_info.authmode;
} else if (me-&gt;wifi_state == WIFI_PROV_STA_DISCONNECTED) {
    ESP_LOGI(TAG, &quot;Disconnected state&quot;);

    /* If disconnected, convey reason */
    Prov_get_wifi_disconnect_reason(&amp;resp_data-&gt;fail_reason);
} else {
    ESP_LOGI(TAG, &quot;Connecting state&quot;);
}
return ESP_OK;</code>
 </operation>
 <operation name="Prov_set_config_handler" type="esp_err_t" visibility="0x02" properties="0x00">
  <parameter name="req_data" type="const wifi_prov_config_set_data_t *"/>
  <code>Provision * me = &amp;l_Provision;

if (me-&gt;wifi_cfg) {
    free(me-&gt;wifi_cfg);
    me-&gt;wifi_cfg = NULL;
}

me-&gt;wifi_cfg = (wifi_config_t *) calloc(1, sizeof(wifi_config_t));
if (!(me-&gt;wifi_cfg)) {
    ESP_LOGE(TAG, &quot;Unable to alloc wifi config&quot;);
    return ESP_FAIL;
}

ESP_LOGI(TAG, &quot;WiFi Credentials Received : \n\tssid %s \n\tpassword %s&quot;,
         req_data-&gt;ssid, req_data-&gt;password);
memcpy((char *) me-&gt;wifi_cfg-&gt;sta.ssid, req_data-&gt;ssid,
       strnlen(req_data-&gt;ssid, sizeof(me-&gt;wifi_cfg-&gt;sta.ssid)));
memcpy((char *) me-&gt;wifi_cfg-&gt;sta.password, req_data-&gt;password,
       strnlen(req_data-&gt;password, sizeof(me-&gt;wifi_cfg-&gt;sta.password)));
return ESP_OK;</code>
 </operation>
 <operation name="Prov_apply_config_handler" type="esp_err_t" visibility="0x02" properties="0x00">
  <code>Provision * me = &amp;l_Provision;

if (!(me-&gt;wifi_cfg)) {
    ESP_LOGE(TAG, &quot;WiFi config not set&quot;);
    return ESP_FAIL;
}

Prov_configure_sta(me-&gt;wifi_cfg);
ESP_LOGI(TAG, &quot;WiFi Credentials Applied&quot;);

free(me-&gt;wifi_cfg);
me-&gt;wifi_cfg = NULL;
return ESP_OK;</code>
 </operation>
 <operation name="Prov_get_wifi_state" type="esp_err_t" visibility="0x02" properties="0x00">
  <parameter name="state" type="wifi_prov_sta_state_t *"/>
  <code>Provision *me = &amp;l_Provision;

if (state == NULL) {
    return ESP_FAIL;
}

*state = me-&gt;wifi_state;
return ESP_OK;</code>
 </operation>
 <operation name="Prov_get_wifi_disconnect_reason" type="esp_err_t" visibility="0x02" properties="0x00">
  <parameter name="reason" type="wifi_prov_sta_fail_reason_t *"/>
  <code>Provision * me = &amp;l_Provision;

if (reason == NULL) {
    return ESP_FAIL;
}

if (me-&gt;wifi_state != WIFI_PROV_STA_DISCONNECTED) {
    return ESP_FAIL;
}

*reason = me-&gt;wifi_disconnect_reason;
return ESP_OK;</code>
 </operation>
 <operation name="Prov_configure_sta" type="esp_err_t" visibility="0x02" properties="0x00">
  <parameter name="wifi_cfg" type="wifi_config_t *"/>
  <code>Provision * me = &amp;l_Provision;

/* Configure WiFi as both AP and Station */
if (esp_wifi_set_mode(WIFI_MODE_APSTA) != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to set WiFi mode&quot;);
    return ESP_FAIL;
}
/* Configure WiFi station with host credentials
 * provided during provisioning */
if (esp_wifi_set_config(ESP_IF_WIFI_STA, me-&gt;wifi_cfg) != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to set WiFi configuration&quot;);
    return ESP_FAIL;
}
/* Restart WiFi */
if (esp_wifi_start() != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to restart WiFi&quot;);
    return ESP_FAIL;
}
/* Connect to AP */
if (esp_wifi_connect() != ESP_OK) {
    ESP_LOGE(TAG, &quot;Failed to connect WiFi&quot;);
    return ESP_FAIL;
}

if (me) {
    /* Reset wifi station state for provisioning app */
    me-&gt;wifi_state = WIFI_PROV_STA_CONNECTING;
}
return ESP_OK;</code>
 </operation>
 <directory name=".">
  <file name="Provision.h">
   <text>#ifndef __KAHAYAG_PROVISION_H__
#define __KAHAYAG_PROVISION_H__

#define MAX_PROV_SSID_LEN        (16)
#define MAX_PROV_PASS_LEN        (32)

#define PROVISION_TIMEOUT        (60000)  /* SRS-0018 */

$declare(components::SystemManagement::components::provision::Prov_ctor)

#endif /* __KAHAYAG_PROVISION_H__ */</text>
  </file>
  <file name="Provision.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;signalList.h&quot;
#include &quot;Provision.h&quot;
#include &quot;Wifi.h&quot;
#include &quot;worker.h&quot;

#include &quot;esp_log.h&quot;
#include &quot;esp_wifi.h&quot;
#include &quot;protocomm.h&quot;
#include &quot;protocomm_httpd.h&quot;
#include &quot;protocomm_security0.h&quot;
#include &quot;protocomm_security1.h&quot;
#include &quot;wifi_provisioning/wifi_config.h&quot;

#include &quot;string.h&quot;

$declare(components::SystemManagement::components::provision::Provision)


Provision l_Provision;
$define(components::SystemManagement::components::provision::TAG)

$declare(components::SystemManagement::components::provision::Prov_get_status_handler)
$declare(components::SystemManagement::components::provision::Prov_set_config_handler)
$declare(components::SystemManagement::components::provision::Prov_get_wifi_state)
$declare(components::SystemManagement::components::provision::Prov_get_wifi_disconnect_reason)
$declare(components::SystemManagement::components::provision::Prov_apply_config_handler)
$declare(components::SystemManagement::components::provision::Prov_configure_sta)

$define(components::SystemManagement::components::provision::Prov_get_status_handler)
$define(components::SystemManagement::components::provision::Prov_set_config_handler)
$define(components::SystemManagement::components::provision::Prov_get_wifi_state)
$define(components::SystemManagement::components::provision::wifi_prov_handlers)
$define(components::SystemManagement::components::provision::Prov_get_wifi_disconnect_reason)
$define(components::SystemManagement::components::provision::Prov_apply_config_handler)
$define(components::SystemManagement::components::provision::Prov_configure_sta)


$define(components::SystemManagement::components::provision::Prov_ctor)
$define(components::SystemManagement::components::provision::Prov_EventHandler)

$define(components::SystemManagement::components::provision::Prov_start_wifi_ap)
$define(components::SystemManagement::components::provision::Prov_start_service)
$define(components::SystemManagement::components::provision::Prov_stop_service)

$define(components::SystemManagement::components::provision::Provision)
</text>
  </file>
 </directory>
</package>
