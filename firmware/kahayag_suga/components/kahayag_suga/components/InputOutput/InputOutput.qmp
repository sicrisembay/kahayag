<?xml version="1.0" encoding="UTF-8"?>
<package name="InputOutput" stereotype="0x02">
 <package name="Events" stereotype="0x01">
  <class name="InputEvt" superclass="qpc::QEvt">
   <attribute name="id" type="uint32_t" visibility="0x02" properties="0x00"/>
  </class>
 </package>
 <class name="InOut" superclass="qpc::QActive">
  <attribute name="tickTimeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
  <attribute name="debouncer[N_INPUT_ID]" type="uint32_t" visibility="0x02" properties="0x00"/>
  <attribute name="inputState[N_INPUT_ID]" type="bool" visibility="0x02" properties="0x00"/>
  <statechart properties="0x01">
   <initial target="../1">
    <initial_glyph conn="5,6,5,0,7,3">
     <action box="0,-2,10,2"/>
    </initial_glyph>
   </initial>
   <state name="TOP">
    <entry>QTimeEvt_armX(&amp;me-&gt;tickTimeEvt, INOUT_TICK_INTERVAL_MS, INOUT_TICK_INTERVAL_MS);</entry>
    <tran trig="TICK">
     <action>uint32_t idx;
InputEvt * pEvt;

for(idx = 0; idx &lt; N_INPUT_ID; idx++) {
    me-&gt;debouncer[idx] = ((me-&gt;debouncer[idx]) &lt;&lt; 1) + gpio_get_level(INPUT_IO[idx]);
    if((me-&gt;debouncer[idx] &amp; IO_DEBOUNCE_MASK(INPUT_DEBOUNCE_THRES[idx])) ==
        IO_DEBOUNCE_MASK(INPUT_DEBOUNCE_THRES[idx])) {
        if(me-&gt;inputState[idx] != 1) {
            pEvt = Q_NEW(InputEvt, INPUT_POSITIVE_EDGE_SIG);
            me-&gt;inputState[idx] = 1;
            pEvt-&gt;id = idx;
            QF_PUBLISH((QEvt *)pEvt, me);
        }
    } else if((me-&gt;debouncer[idx] &amp; IO_DEBOUNCE_MASK(INPUT_DEBOUNCE_THRES[idx])) == 0) {
        if(me-&gt;inputState[idx] != 0) {
            pEvt = Q_NEW(InputEvt, INPUT_NEGATIVE_EDGE_SIG);
            me-&gt;inputState[idx] = 0;
            pEvt-&gt;id = idx;
            QF_PUBLISH((QEvt *)pEvt, me);
        }
    }
}</action>
     <tran_glyph conn="4,16,3,-1,14">
      <action box="0,-2,10,2"/>
     </tran_glyph>
    </tran>
    <state_glyph node="4,9,46,25">
     <entry box="1,2,6,2"/>
    </state_glyph>
   </state>
   <state_diagram size="80,56"/>
  </statechart>
 </class>
 <attribute name="AO_InOut" type="QActive * const" visibility="0x00" properties="0x00">
  <code>=&amp;l_InOut.super;</code>
 </attribute>
 <operation name="InOut_ctor" type="void" visibility="0x00" properties="0x00">
  <code>static uint8_t bInitDone = (uint8_t)0;
gpio_config_t io_conf;
uint32_t idx;
uint64_t input_bit_mask;
char taskName[16];
InOut *me;

if(bInitDone == (uint8_t)0) {
    me = &amp;l_InOut;
    /* Call constructor */
    QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;InOut_initial));
    /* Call orthogonal Component constructor */

    /* Call Timer Constructor */
    QTimeEvt_ctorX(&amp;me-&gt;tickTimeEvt,  &amp;me-&gt;super, TICK_SIG,  0U);

    /* Initialize members */

    /* Initialize IO */
    io_conf.intr_type = GPIO_PIN_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_INPUT;
    input_bit_mask = 0;
    for(idx = 0; idx &lt; N_INPUT_ID; idx++) {
        input_bit_mask |= (1ULL &lt;&lt; INPUT_IO[idx]);
    }
    io_conf.pin_bit_mask = input_bit_mask;
    io_conf.pull_down_en = 0;
    io_conf.pull_up_en = 1;
    gpio_config(&amp;io_conf);

    /* Initialize input state */
    for(idx = 0; idx &lt; N_INPUT_ID; idx++) {
        if(gpio_get_level(INPUT_IO[idx])) {
            me-&gt;inputState[idx] = 1;
            me-&gt;debouncer[idx] = UINT32_MAX;
        } else {
            me-&gt;inputState[idx] = 0;
            me-&gt;debouncer[idx] = 0;
        }
    }

    /* Start active object */
    sprintf(taskName, &quot;AO_IN_OUT&quot;);
    QActive_setAttr(AO_InOut, TASK_NAME_ATTR, taskName);
    QACTIVE_START(
        AO_InOut,
        PRIORITY_IN_OUT,
        l_InOutQSto,
        Q_DIM(l_InOutQSto),
        inOutStack,
        sizeof(inOutStack),
        (QEvt *)0);

    bInitDone = (uint8_t)1;
}</code>
 </operation>
 <operation name="InOut_GetInputState" type="bool" visibility="0x00" properties="0x00">
  <parameter name="id" type="INPUT_ID_T"/>
  <code>InOut * me = &amp;l_InOut;
bool retval = false;

if(id &lt; N_INPUT_ID) {
    retval = me-&gt;inputState[id];
}

return(retval);</code>
 </operation>
 <directory name=".">
  <file name="InOut.h">
   <text>#ifndef IN_OUT_H
#define IN_OUT_H

#define INOUT_TICK_INTERVAL_MS        (10)

typedef enum {
    INPUT_ID_ONE = 0,

    N_INPUT_ID
} INPUT_ID_T;

$declare(components::InputOutput::Events::InputEvt)

$declare(components::InputOutput::AO_InOut)

$declare(components::InputOutput::InOut_ctor)
$declare(components::InputOutput::InOut_GetInputState)

#endif /* IN_OUT_H */</text>
  </file>
  <file name="InOut.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;signalList.h&quot;
#include &quot;priorityList.h&quot;
#include &quot;InOut.h&quot;
#include &quot;driver/gpio.h&quot;
#include &quot;SysMngt.h&quot;

Q_DEFINE_THIS_FILE

const static uint32_t const INPUT_IO[N_INPUT_ID] = {
    5    /* GPIO_0 */
};

const static uint8_t const INPUT_DEBOUNCE_THRES[N_INPUT_ID] = {
    5,    /* 5 * INOUT_TICK_INTERVAL_MS */ 
};

#define IO_DEBOUNCE_MASK(x)    ((uint32_t)((1ULL &lt;&lt; x) - 1))

$declare(components::InputOutput::InOut)

/* Local Object */
static InOut l_InOut;
/* FreeRTOS stack for AO */
static StackType_t inOutStack[2*configIDLE_TASK_STACK_SIZE];
/* AO Queue */
QEvt const * l_InOutQSto[64];

$define(components::InputOutput::AO_InOut)

$define(components::InputOutput::InOut_ctor)
$define(components::InputOutput::InOut_GetInputState)

$define(components::InputOutput::InOut)
</text>
  </file>
 </directory>
</package>
