<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.0" links="0">
 <framework name="qpc"/>
 <package name="components" stereotype="0x02">
  <package file="./components/SystemManagement/SystemManagement.qmp"/>
  <package file="./components/InputOutput/InputOutput.qmp"/>
 </package>
 <directory name=".">
  <file name="signalList.h">
   <text>#ifndef SIGNAL_LIST_H
#define SIGNAL_LIST_H

enum testSignal {
    // Events/Signals that are published **************************************
    /* Published Sensor Signals */
    INPUT_POSITIVE_EDGE_SIG = Q_USER_SIG,
    INPUT_NEGATIVE_EDGE_SIG,

    MAX_PUB_SIG,                            // last published signal

    // Events/Signals that are posted directly *******************************
    GET_OBJECT_DICTIONARY_SIG,
    GET_FUNC_DICTIONARY_SIG,
    GET_SIGNAL_DICTIONARY_SIG,
    /* Module Generic Signal */
    TICK_SIG,
    /* Provision */
    START_PROVISION_SIG,
    AP_STARTED_SIG,
    AP_START_FAILED_SIG,
    PROV_SERVICE_STARTED_SIG,
    PROV_SERVICE_START_FAILED_SIG,
    PROV_SERVICE_STOPPED_SIG,
    PROV_SERVICE_TIMEOUT_SIG,

    MAX_SIG
};

#endif /* SIGNAL_LIST_H */</text>
  </file>
  <file name="priorityList.h">
   <text>#ifndef PRIORITY_LIST_H
#define PRIORITY_LIST_H

enum task_priority {
    PRIORITY_WORKER = tskIDLE_PRIORITY + 1,
    PRIORITY_QSPY_TX,
    PRIORITY_QSPY_RX,
    PRIORITY_IN_OUT,
    PRIORITY_SYS_MNGT,

    PRIORITY_MAX
};

/* freeRTOS task priority should be less than configMAX_PRIORITIES
 * as defined in FreeRTOSConfig.h
 */
Q_ASSERT_COMPILE(PRIORITY_MAX &lt; configMAX_PRIORITIES);

#endif /* PRIORITY_LIST_H */</text>
  </file>
  <file name="worker.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;freertos/FreeRTOS.h&quot;
#include &quot;freertos/task.h&quot;
#include &quot;worker.h&quot;
#include &quot;esp_log.h&quot;
#include &quot;soc/soc.h&quot;
#include &quot;priorityList.h&quot;

#define WORKER_DEFAULT_STACK_SIZE        (2*configIDLE_TASK_STACK_SIZE)

static const char *TAG = &quot;worker&quot;;

static void workTask(void *pParam)
{
    WorkFunction fcn = (WorkFunction)pParam;
    if(fcn != NULL) {
        (*fcn)();
    } else {
        ESP_LOGE(TAG, &quot;Invalid Worker Function Pointer&quot;);
    }
    vTaskDelete(NULL);
}

esp_err_t doWork(WorkFunction fcn)
{
    esp_err_t retval = ESP_OK;

#if defined( CONFIG_QPC_PINNED_TO_CORE_0 )
    BaseType_t xCoreId = PRO_CPU_NUM;
#elif defined( CONFIG_QPC_PINNED_TO_CORE_1)
    BaseType_t xCoreId = APP_CPU_NUM;
#else
    BaseType_t xCoreId = tskNO_AFFINITY;
#endif

    /* Create Worker Thread */
    if(pdPASS != xTaskCreatePinnedToCore(
                    workTask,
                    &quot;workTask&quot;,
                    WORKER_DEFAULT_STACK_SIZE,
                    (void *) fcn,
                    PRIORITY_WORKER,
                    NULL,
                    xCoreId)) {
        return ESP_FAIL;
    }

    return (retval);
}</text>
  </file>
  <file name="worker.h">
   <text>#ifndef __QPC_WORKER_H__
#define __QPC_WORKER_H__

#include &quot;esp_err.h&quot;

typedef void (*WorkFunction)(void);

esp_err_t doWork(WorkFunction fcn);

#endif /* __QPC_WORKER_H__ */</text>
  </file>
 </directory>
</model>
